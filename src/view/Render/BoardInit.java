package view.Render;


import controller.*;
import controller.adapter.Key;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

//Firstly this is the panel and we initiliaze the board here.dodrawing() contains different cases with respect to the flags.
//Flags are about the game states, timer is working every 40msec and running the paintComponent(g) which is a common function of the ActionListener.
//

public class BoardInit extends JPanel implements ActionListener {
    private Game game;
    private Timer timer;
    Key key = new Key();
    boolean flag = true;
    StateHandler stateHandler = new StateHandler();


    public BoardInit(Game game) {
        initBoard(game);
    }

    private void initBoard(Game game) {

        setFocusable(true);
        setBackground(Color.black);
        setDoubleBuffered(true);
        this.game = game;
        timer = new Timer(50, this);
        timer.start();

    }


    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        doDrawing(g);
    }

    /*
     * This method would run every 40ms(depends on timer).
     * */

    private void doDrawing(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        System.out.println(game.getData().getData_state().toString());
        GameState state;
        if (game.getData().getData_state().toString().equals("SELECTION")) {
            addKeyListener(SelectionAdapter);
            state = (SelectionState) stateHandler.changeState(game, "SELECTION");
            state.showDisplay(g2d, game);
            System.out.println("Selection");
        } else if (game.getData().getData_state().toString().equals("PLAY")) {
            removeKeyListener(SelectionAdapter);
            if (flag) {
                addKeyListener(new PlayAdapter());
            }
            flag = false;
            state = (PlayState) stateHandler.changeState(game, "PLAY");
            state.showDisplay(g2d, game);
            GhostHandler gh = new GhostHandler();
            gh.ConstantMoving(game);
        }

        Toolkit.getDefaultToolkit().sync();
        g2d.dispose();
    }

    /*
     * This method is automatically generated by the actionlistener
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
    }

    KeyAdapter SelectionAdapter = new KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent e) {
            super.keyPressed(e);
            int key = e.getKeyCode();
            try {
                InputHandler handler = new InputHandler();
                handler.SelectBoard(key, game);
                stateHandler.changeState(game, "PLAY");
            } catch (Exception ex) {
                System.out.println("Invalid Input Detected");
            }

        }
    };


    class PlayAdapter extends KeyAdapter {
        @Override
        public void keyPressed(KeyEvent e) {
            super.keyPressed(e);
            int keyCode = e.getKeyCode();
            key.move(keyCode, game);
        }

    }
}


