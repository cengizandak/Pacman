package view.Render;


import controller.*;
import controller.adapter.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

// Firstly this is the panel and we initiliaze the board here.
// dodrawing() contains different cases with respect to the flags.
// Flags are about the game states,
// timer is working every 40msec and running the paintComponent(g)
// which is a common function of the ActionListener.

public class BoardInit extends JPanel implements ActionListener {
    private Game game;
    private GameState state;
    private Timer timer;
    boolean flag = true;
    Key key = new Key();
    StateHandler stateHandler = new StateHandler();
    GhostHandler gh = new GhostHandler();

    public BoardInit(Game game) {
        initBoard(game);
    }

    private void initBoard(Game game) {
        setFocusable(true);
        setBackground(Color.black);
        setDoubleBuffered(true);
        this.game = game;
        timer = new Timer(120, this);
        timer.start();
        if (game.getData().getData_state().toString().equals("SELECTION")) {
            addKeyListener(SelectionAdapter);
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        doDrawing(g);
    }

    /*
     * This method would run every 40ms(depends on timer).
     * */
    private void doDrawing(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        if (game.getData().getData_state().toString().equals("SELECTION")) {
            state = (SelectionState) stateHandler.changeState(game, "SELECTION");
            state.showDisplay(g2d, game);
        } else if (game.getData().getData_state().toString().equals("PLAY")) {
            removeKeyListener(SelectionAdapter);
            if (flag) {
                addKeyListener(PlayAdapter);
                state = (PlayState) stateHandler.changeState(game, "PLAY");
            }
            flag = false;
            drawCountSCore(g2d);
            game.detectGhostTool(game);
            state.showDisplay(g2d, game);
            gh.ConstantMoving(game);
            game.detectGhostTool(game);
        }
        Toolkit.getDefaultToolkit().sync();
        g2d.dispose();
    }

    public void drawCountSCore(Graphics2D g2d) {
        String sLevel = "" + game.getData().getData_level();
        String sPoint = "SCORE: " + Integer.toString(game.getData().getData_point());
        String sLive = "Live(s): " + game.getPacman().getLives();
        Font small = new Font("Helvetica", Font.BOLD, 20);
        g2d.setColor(Color.white);
        g2d.setFont(small);
        g2d.drawString(sLevel, 650, 70);
        g2d.drawString(sPoint, 650, 100);
        g2d.drawString(sLive, 650, 130);
    }

    /*
     * This method is automatically generated by the actionlistener
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
    }

    KeyAdapter SelectionAdapter = new KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent e) {
            super.keyPressed(e);
            int key = e.getKeyCode();
            try {
                InputHandler handler = new InputHandler();
                handler.SelectBoard(key, game);
                stateHandler.changeState(game, "PLAY");
            } catch (Exception ex) {
                System.out.println("Invalid Input Detected");
            }
        }
    };

    KeyAdapter PlayAdapter = new KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent e) {
            super.keyPressed(e);
            int keyCode = e.getKeyCode();
            key.move(keyCode, game);
        }
    };
}


